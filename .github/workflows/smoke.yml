name: Smoke Tests

on:
  schedule:
    - cron: '0 12 * * *'  # 12:00 PM UTC = 4:00 AM PT (standard)
  workflow_dispatch:      # enables manual triggering

jobs:
  smoke-test:
    runs-on: ubuntu-latest
    
    # üöÄ Ollama Service runs alongside main container
    services:
      ollama:
        image: ollama/ollama
        ports:
          - 11434:11434

    # üîß Your actual job container
    container:
      image: python:3.12-slim

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          apt-get update && apt-get install -y curl shellcheck
          pip install -r requirements-build.txt
          pip install -r requirements.txt

      - name: Wait for Ollama service to become responsive
        run: |
          for i in {1..10}; do
            echo "Checking if Ollama API is ready..."
            curl --fail --silent http://ollama:11434/api/tags && break
            echo "Waiting 5s..."
            sleep 5
          done

      - name: Pull Ollama model (qwen3:8b)
        run: |
          curl http://ollama:11434/api/pull \
            -d '{ "name": "qwen3:8b" }'
    
      - name: Wait for Ollama port to be ready (post-pull)
        run: |
          for i in {1..60}; do
            echo "Checking if Ollama API is ready..."
            curl --fail --silent http://ollama:11434/api/tags && break
            echo "Waiting 5s..."
            sleep 5
          done
      
      - name: Generate text as ollama with retry (every 30s up to 3m)
        run: |
          SUCCESS=0
          for i in $(seq 1 6); do
            echo "‚è≥ Attempt #$i: Generating text‚Ä¶"
            if curl --fail --silent http://ollama:11434/api/generate \
                 -X POST \
                 -H "Content-Type: application/json" \
                 -d '{
                   "model": "qwen3:8b",
                   "prompt": "Briefly define reinforcement learning.",
                   "stream": false
                 }'; then
              echo "‚úÖ Generation succeeded on attempt #$i"
              SUCCESS=1
              break
            fi
            echo "‚è±  Waiting 30s before retry‚Ä¶"
            sleep 30
          done
          if [ "$SUCCESS" -ne 1 ]; then
            echo "‚ùå Timeout: failed to generate after 3 minutes"
            exit 1
          fi
      
      - name: Show installed packages
        run: pip freeze

      - name: Start server & run smoke tests
        shell: bash
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
          AZURE_OPENAI_API_KEY: ${{ secrets.AZURE_OPENAI_API_KEY }}
          AZURE_OPENAI_ENDPOINT: ${{ vars.AZURE_OPENAI_ENDPOINT }}
          OPENAI_API_VERSION: ${{ vars.OPENAI_API_VERSION }}
          AGENT_TOOL_PATH: "./neuro_san/coded_tools"
          PYTHONPATH: ${{ env.PYTHONPATH }}:.
        run: |
          build_scripts/server_start.sh

          if ! pytest -s --verbose -m "smoke" --timer-top-n 100 -n auto; then
            echo "===================================================="
            echo "===================================================="
            echo "=== Server_Sevice_Agent.LOG ==="
            cat agent.log || echo "(no agent.log found)"
            echo "===================================================="
            exit 1
          fi

      - name: Notify Slack on success
        if: success()
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: |
            {
              "text": "‚úÖ *Smoke Tests Passed* for `${{ github.repository }}` on `${{ github.ref_name }}`"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify Slack on failure
        if: failure()
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: |
            {
              "text": "‚ùå *Smoke Tests Failed* for `${{ github.repository }}` on `${{ github.ref_name }}`"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
