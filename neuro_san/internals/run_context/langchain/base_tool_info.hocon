
# Copyright (C) 2023-2025 Cognizant Digital Business, Evolutionary AI.
# All Rights Reserved.
# Issued under the Academic Public License.
#
# You can be released from the terms, and requirements of the Academic Public
# License by purchasing a commercial license.
# Purchase of a commercial license is mandatory for any use of the
# neuro-san SDK Software in commercial settings.
#
# END COPYRIGHT

{
    # ------------------------------------------------------------------------------------------
    # Overview:
    # - This file defines configurations for tools and toolkits compatible with LangChain.
    # - More details about LangChain tools and toolkits can be found at:
    #   https://python.langchain.com/docs/integrations/tools/
    #
    # Requirements:
    # - Each tool or toolkit must have a "class" key.
    # - The specified class must be available in the server's PYTHONPATH.
    # - Depending on the Tools, Toolkits are instantiate either via a constructor or a class method.
    # - Additional dependencies (outside of langchain_community) must be installed separately.
    #
    # Customization via Agent HOCON File:
    # - In the agent HOCON file, users can define an "args" section to **add or override** 
    #   arguments from this tool configuration file dynamically at runtime.
    # - Users can override or add **only the constructor or method arguments** via the agent HOCON file.
    # - Users cannot override or inject args into nested classes like wrappers (e.g. ToolAPIWrapper).
    # ------------------------------------------------------------------------------------------

    # ---------------- Bing Search Tool ----------------
    # This configuration defines the Bing Search tool.
    # It initializes a BingSearchResults instance with:
    # - api_wrapper: An instance of BingSearchAPIWrapper
    # - num_results: Specifies that the search should return 3 results
    "bing_search": {
        # This is the class of the tool to use
        "class": "langchain_community.tools.bing_search.BingSearchResults",
        # This is where more info on the tool can be found.
        "base_tool_info_url": "https://python.langchain.com/docs/integrations/tools/bing_search/",
        # Arguments for the tool's constructor.
        # These arguments will be used when instantiating the tool unless overridden in the agent HOCON file.
        "args": {
            "api_wrapper": {
                "class": "langchain_community.utilities.BingSearchAPIWrapper",
            },
            "num_results": 3
        }
    },

    # ---------------- Tavily Search Tool ----------------
    # This configuration sets up the Tavily Search tool.
    # It initializes a TavilySearchResults instance with:
    # - max_results: Specifies that the search should return 5 results
    "tavily_search": {
        # This is the class of the tool to use
        "class": "langchain_community.tools.tavily_search.TavilySearchResults",
        # This is where more info on the tool can be found.
        "base_tool_info_url": "https://python.langchain.com/api_reference/community/tools/langchain_community.tools.tavily_search.tool.TavilySearchResults.html",
        # Arguments for the tool's constructor.
        # These arguments will be used when instantiating the tool unless overridden in the agent HOCON file.
        "args": {
            "max_results": 5
        }
    },

    # ---------------- Requests Toolkit (Batch of Tools) ----------------
    # This defines a requests toolkit that provides multiple HTTP request utilities.
    # It initializes RequestsToolkit with:
    # - requests_wrapper: An instance of TextRequestsWrapper (used to manage headers)
    # - allow_dangerous_requests: Enables execution of potentially unsafe requests
    # The `.get_tools()` method is called, meaning this toolkit returns multiple tools.
    "requests_toolkit": {
        # This is the class of the tool to use
        "class": "langchain_community.agent_toolkits.openapi.toolkit.RequestsToolkit",
        # This is where more info on the tool can be found.
        "base_tool_info_url": "https://python.langchain.com/docs/integrations/tools/requests/",
        # Arguments for the tool's constructor.
        # These arguments will be used when instantiating the tool unless overridden in the agent HOCON file.
        "args": {
            "requests_wrapper": {
                "class": "langchain_community.utilities.requests.TextRequestsWrapper",
            },
            "allow_dangerous_requests": true
        }
    },

    # ---------------- Individual HTTP Request Tools ----------------
    
    # GET request tool
    # This sets up a tool that can send HTTP GET requests.
    # It initializes RequestsGetTool with:
    # - requests_wrapper: Manages request headers
    # - allow_dangerous_requests: Enables potentially unsafe requests
    "requests_get": {
        # This is the class of the tool to use
        "class": "langchain_community.tools.requests.tool.RequestsGetTool",
        # This is where more info on the tool can be found.
        "base_tool_info_url": "https://python.langchain.com/docs/integrations/tools/requests/",
        # Arguments for the tool's constructor.
        # These arguments will be used when instantiating the tool unless overridden in the agent HOCON file.
        "args": {
            "requests_wrapper": {
                "class": "langchain_community.utilities.requests.TextRequestsWrapper",
            },
            "allow_dangerous_requests": true
        }
    },

    # POST request tool
    # This configures an HTTP POST request tool.
    # It is similar to the GET tool but allows sending data in the request body.
    "requests_post": {
        # This is the class of the tool to use
        "class": "langchain_community.tools.requests.tool.RequestsPostTool",
        # This is where more info on the tool can be found.
        "base_tool_info_url": "https://python.langchain.com/docs/integrations/tools/requests/",
        # Arguments for the tool's constructor.
        # These arguments will be used when instantiating the tool unless overridden in the agent HOCON file.
        "args": {
            "requests_wrapper": {
                "class": "langchain_community.utilities.requests.TextRequestsWrapper",
            },
            "allow_dangerous_requests": true
        }
    },

    # PATCH request tool
    # This allows sending PATCH requests, typically used to update resources.
    "requests_patch": {
        # This is the class of the tool to use
        "class": "langchain_community.tools.requests.tool.RequestsPatchTool",
        # This is where more info on the tool can be found.
        "base_tool_info_url": "https://python.langchain.com/docs/integrations/tools/requests/",
        # Arguments for the tool's constructor.
        # These arguments will be used when instantiating the tool unless overridden in the agent HOCON file.
        "args": {
            "requests_wrapper": {
                "class": "langchain_community.utilities.requests.TextRequestsWrapper",
            },
            "allow_dangerous_requests": true
        }
    },

    # PUT request tool
    # This allows sending PUT requests, which are used to replace resources.
    "requests_put": {
        # This is the class of the tool to use
        "class": "langchain_community.tools.requests.tool.RequestsPutTool",
        # This is where more info on the tool can be found.
        "base_tool_info_url": "https://python.langchain.com/docs/integrations/tools/requests/",
        # Arguments for the tool's constructor.
        # These arguments will be used when instantiating the tool unless overridden in the agent HOCON file.
        "args": {
            "requests_wrapper": {
                "class": "langchain_community.utilities.requests.TextRequestsWrapper",
            },
            "allow_dangerous_requests": true
        }
    },

    # DELETE request tool
    # This enables HTTP DELETE requests to remove resources.
    "requests_delete": {
        # This is the class of the tool to use
        "class": "langchain_community.tools.requests.tool.RequestsDeleteTool",
        # This is where more info on the tool can be found.
        "base_tool_info_url": "https://python.langchain.com/docs/integrations/tools/requests/",
        # Arguments for the tool's constructor.
        # These arguments will be used when instantiating the tool unless overridden in the agent HOCON file.
        "args": {
            "requests_wrapper": {
                "class": "langchain_community.utilities.requests.TextRequestsWrapper",
            },
            "allow_dangerous_requests": true
        }
    }
}
